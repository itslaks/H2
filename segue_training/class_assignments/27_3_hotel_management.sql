CREATE DATABASE HOTEL;

CREATE TABLE HOTELS (
HotelID INT NOT NULL PRIMARY KEY,
Name VARCHAR(140),
Location VARCHAR(100),
Ratings Decimal (2,1) CHECK (Ratings BETWEEN 1 AND 5)
);

CREATE TABLE Rooms (
    RoomID INT PRIMARY KEY IDENTITY(1,1),
    HotelID INT FOREIGN KEY REFERENCES Hotels(HotelID) ON DELETE CASCADE,
    RoomNumber NVARCHAR(50) NOT NULL,
    RoomType NVARCHAR(50) NOT NULL,
    PricePerNight DECIMAL(10,2) NOT NULL,
    Available BIT NOT NULL DEFAULT 1
);

CREATE TABLE Guests (
    GuestID INT PRIMARY KEY IDENTITY(1,1),
    FullName NVARCHAR(255) NOT NULL,
    Email NVARCHAR(255) UNIQUE NOT NULL,
    PhoneNumber NVARCHAR(20) UNIQUE NOT NULL,
    CheckInDate DATETIME,
    CheckOutDate DATETIME
);

CREATE TABLE Bookings (
    BookingID INT PRIMARY KEY IDENTITY(1,1),
    GuestID INT FOREIGN KEY REFERENCES Guests(GuestID) ON DELETE CASCADE,
    RoomID INT FOREIGN KEY REFERENCES Rooms(RoomID) ON DELETE CASCADE,
    BookingDate DATETIME DEFAULT GETDATE(),
    TotalAmount DECIMAL(10,2),
    Status NVARCHAR(50) CHECK (Status IN ('Confirmed', 'Cancelled', 'Checked Out'))
);

CREATE TABLE Payments (
    PaymentID INT PRIMARY KEY IDENTITY(1,1),
    BookingID INT FOREIGN KEY REFERENCES Bookings(BookingID) ON DELETE CASCADE,
    AmountPaid DECIMAL(10,2) NOT NULL,
    PaymentDate DATETIME DEFAULT GETDATE(),
    PaymentMethod NVARCHAR(50) NOT NULL
);

CREATE TABLE Events (
    EventID INT PRIMARY KEY IDENTITY(1,1),
    HotelID INT FOREIGN KEY REFERENCES Hotels(HotelID) ON DELETE CASCADE,
    EventName NVARCHAR(255) NOT NULL,
    EventDate DATETIME NOT NULL,
    Venue NVARCHAR(255) NOT NULL
);

CREATE TABLE EventParticipants (
    ParticipantID INT PRIMARY KEY IDENTITY(1,1),
    ParticipantName NVARCHAR(255) NOT NULL,
    ParticipantType NVARCHAR(50) CHECK (ParticipantType IN ('Guest', 'Organization')),
    EventID INT FOREIGN KEY REFERENCES Events(EventID) ON DELETE CASCADE
);

INSERT INTO Hotels VALUES
(1,'Taj Palace', 'Mumbai', 5.0),
(2,'Leela Palace', 'Delhi', 4.8),
(3,'ITC Grand Chola', 'Chennai', 4.7),
(4,'Oberoi Udaivilas', 'Udaipur', 4.9),
(5,'The Lalit', 'Kolkata', 4.5),
(6,'Hyatt Regency', 'Bangalore', 4.6);

INSERT INTO Rooms  VALUES
(1, '101A', 'Suite', 250.00, 1),
(2, '202B', 'Deluxe', 180.00, 1),
(3, '303C', 'Single', 100.00, 0),
(4, '404D', 'Double', 150.00, 1),
(5, '505E', 'Suite', 300.00, 1),
(6, '606F', 'Deluxe', 175.00, 0);

INSERT INTO Guests VALUES
('Virat Kohli', 'virat.kohli@rcb.com', '9876543210', '2025-03-25', '2025-03-30'),
('MS Dhoni', 'ms.dhoni@csk.com', '9876543211', '2025-03-20', '2025-03-28'),
('Rohit Sharma', 'rohit.sharma@mi.com', '9876543212', '2025-03-18', '2025-03-25'),
('Ben Stokes', 'ben.stokes@ecb.com', '9876543213', '2025-03-22', '2025-03-29'),
('Steve Smith', 'steve.smith@ca.com', '9876543214', '2025-03-27', NULL),
('Joe Root', 'joe.root@rr.com', '9876543215', '2025-03-26', NULL);

INSERT INTO Bookings  VALUES
(1, 1, '2025-03-20', 1250.00, 'Confirmed'),
(2, 2, '2025-03-21', 900.00, 'Checked Out'),
(3, 3, '2025-03-22', 500.00, 'Confirmed'),
(4, 4, '2025-03-23', 750.00, 'Cancelled'),
(5, 5, '2025-03-24', 1800.00, 'Confirmed'),
(6, 6, '2025-03-25', 875.00, 'Checked Out');

INSERT INTO Payments VALUES
(1, 1250.00, '2025-03-21', 'Credit Card'),
(2, 900.00, '2025-03-22', 'Cash'),
(3, 500.00, '2025-03-23', 'UPI'),
(4, 750.00, '2025-03-24', 'Bank Transfer'),
(5, 1800.00, '2025-03-25', 'Credit Card'),
(6, 875.00, '2025-03-26', 'Cash');

INSERT INTO Events VALUES
(1, 'Cricket Awards Night', '2025-04-05', 'Banquet Hall'),
(2, 'Sports Conference', '2025-04-10', 'Grand Ballroom'),
(3, 'Team Party', '2025-04-15', 'Rooftop Lounge'),
(4, 'Charity Gala', '2025-04-20', 'Garden Pavilion'),
(5, 'Press Conference', '2025-04-25', 'Meeting Room'),
(6, 'Player Meet & Greet', '2025-04-30', 'Main Lobby');

INSERT INTO EventParticipants VALUES
('Virat Kohli', 'Guest', 1),
('MS Dhoni', 'Guest', 2),
('Rohit Sharma', 'Guest', 3),
('Ben Stokes', 'Guest', 4),
('Steve Smith', 'Guest', 5),
('Joe Root', 'Guest', 6);


-- 4) Retrieve a list of available rooms for booking
SELECT * FROM Rooms WHERE Available = 1;


-- 5) Retrieve names of participants for a specific hotel event
DECLARE @EventID INT = 1; 
SELECT ParticipantName, ParticipantType
FROM EventParticipants
WHERE EventID = @EventID;


--6) Stored Procedure to Update Hotel Information
CREATE PROCEDURE UpdateHotelInfo
    @HotelID INT,
    @NewName NVARCHAR(100),
    @NewLocation NVARCHAR(100)
AS BEGIN
    UPDATE Hotels
    SET Name = @NewName, Location = @NewLocation
    WHERE HotelID = @HotelID;
END;


-- 7) Total revenue generated by each hotel from confirmed bookings
select h.hotelid, h.name, sum(b.totalamount) as TotalRevenue
from hotels h, rooms r, bookings b
where h.hotelid = r.hotelid and r.roomid = b.roomid and b.status = 'confirmed'
group by h.hotelid, h.name;


--8) Find rooms that have never been booked
select * from rooms  
where roomid not in (select roomid from bookings);


--9)Retrieve total payments per month and year
select format(paymentdate, 'yyyy-MM') as year_month, sum(amountpaid) as total_payments
from payments
group by format(paymentdate, 'yyyy-MM')
order by year_month;


--10)Retrieve room types priced between $50-$150 or above $300
SELECT DISTINCT RoomType FROM Rooms
WHERE PricePerNight BETWEEN 50 AND 150 OR PricePerNight > 300;


-- 11)Retrieve rooms along with their guests (only occupied rooms)
SELECT r.RoomNumber, g.FullName 
FROM Rooms r
JOIN Bookings b ON r.RoomID = b.RoomID
JOIN Guests g ON b.GuestID = g.GuestID
WHERE b.Status = 'Confirmed';


--12)Total participants in events held in a specific city
DECLARE @CityName NVARCHAR(100) = 'Mumbai';
SELECT COUNT(ep.ParticipantID) AS TotalParticipants
FROM EventParticipants ep
JOIN Events e ON ep.EventID = e.EventID
JOIN Hotels h ON e.HotelID = h.HotelID
WHERE h.Location = @CityName;


--13) Retrieve unique room types available in a specific hotel
DECLARE @HotelID INT = 1;
SELECT DISTINCT RoomType FROM Rooms 
WHERE HotelID = @HotelID;


--14) Find guests who have never made a booking
SELECT g.FullName, g.Email 
FROM Guests g
LEFT JOIN Bookings b ON g.GuestID = b.GuestID
WHERE b.GuestID IS NULL;


--15)Retrieve names of all booked rooms along with the guests who booked them
SELECT r.RoomNumber, g.FullName 
FROM Bookings b
JOIN Rooms r ON b.RoomID = r.RoomID
JOIN Guests g ON b.GuestID = g.GuestID;


--16)Retrieve all hotels along with the count of available rooms
SELECT h.Name AS HotelName, COUNT(r.RoomID) AS AvailableRooms
FROM Hotels h
JOIN Rooms r ON h.HotelID = r.HotelID
WHERE r.Available = 1
GROUP BY h.Name;


--17)Find pairs of rooms from the same hotel that belong to the same room type
SELECT r1.RoomNumber AS Room1, r2.RoomNumber AS Room2, r1.HotelID, r1.RoomType
FROM Rooms r1
JOIN Rooms r2 
ON r1.HotelID = r2.HotelID 
AND r1.RoomType = r2.RoomType
AND r1.RoomID < r2.RoomID;


--18)List all possible combinations of hotels and events
SELECT h.Name AS HotelName, e.EventName 
FROM Hotels h
CROSS JOIN Events e;


--19) Determine the hotel with the highest number of bookings
SELECT TOP 1 h.Name AS HotelName, COUNT(b.BookingID) AS TotalBookings
FROM Hotels h
JOIN Rooms r ON h.HotelID = r.HotelID
JOIN Bookings b ON r.RoomID = b.RoomID
GROUP BY h.Name
ORDER BY TotalBookings DESC;


--20) stored procedures (5 examples)
CREATE PROCEDURE changehinfo 
@HotelID INT, @NewName VARCHAR(50), @NewLocation VARCHAR(50)
AS BEGIN
UPDATE HOTELS
SET Name = @NewName , Location = @NewLocation WHERE HotelID = @HotelID;
END;

EXEC changehinfo 1, 'LE MERIDIAN', 'COIMBATORE';


CREATE PROCEDURE changepaymentmethod
@PaymentID INT , @newpaymentmethod VARCHAR(55)
AS BEGIN
UPDATE Payments
SET PaymentMethod = @newpaymentmethod WHERE PaymentID = @PaymentID;
END;

EXEC changepaymentmethod 2,'UPI';


CREATE PROCEDURE extendcheckoutdate
@GuestID INT, @newdate DATETIME 
AS BEGIN 
UPDATE Guests 
SET CheckOutDate = @newdate WHERE GuestID = @GuestID;
END;

EXEC extendcheckoutdate 3,'2025-04-03';


CREATE PROCEDURE GetAvailableRooms
@HotelID INT
AS BEGIN
SELECT RoomNumber, RoomType, PricePerNight
FROM Rooms
WHERE Available = 1 AND HotelID = @HotelID;
END;

EXEC GetAvailableRooms 3;


CREATE PROCEDURE GetHotelEvents
@HotelID INT
AS BEGIN
SELECT EventID, EventName, EventDate, Venue
FROM Events
WHERE HotelID = @HotelID;
END;

EXEC GetHotelEvents 3;


